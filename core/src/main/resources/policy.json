[
  {
  "name": "Every user can view home",
  "description": "Every user can view home",
  "target": "action == 'HOME_VIEW'",
  "condition": "true==true"
  },
  {
    "name": "Every user can count his projects",
    "description": "Every user can count his projects",
    "target": "action == 'PROJECT_COUNT'",
    "condition": "true==true"
  },
  {
    "name": "Every user can edit his timesheet",
    "description": "Every user can edit his timesheet",
    "target": "action == 'TIMESHEET_LIST'",
    "condition": "true==true"
  },
  {
    "name": "Every user can list his tasks",
    "description": "Every user can list his tasks",
    "target": "action == 'TASK_LIST'",
    "condition": "true==true"
  },
  {
    "name": "User can create project",
    "description": "Any user with role OWNER membership on current org can create projects",
    "target": "action == 'PROJECT_CREATE'",
    "condition": "subject.currentOrganizationRole('OWNER') && environment.checkProjectByUserLimit(subject)"
  },{
    "name": "Project owner can setup project",
    "description": "Only user with role OWNER on project can setup project",
    "target": "action == 'PROJECT_SETUP' || action == 'TASK_LIST'",
    "condition": "subject.currentProjectRole(resource, 'OWNER')"
  },
  {
    "name": "User can create task in a project",
    "description": "Any user belonging to the project can create tasks in this project",
    "target": "action == 'TASKS_CREATE'",
    "condition": "resource.isMember(subject.getDetails()) && environment.checkTaskByProjectLimit(subject, resource)"
  },
  {
    "name": "User can list projects",
    "description": "Any user can list projects",
    "target": "action == 'PROJECT_LIST'",
    "condition": "subject.currentOrganizationRole('OWNER')"
  },
  {
    "name": "User can create task in a project",
    "description": "Any user belonging to the project can create tasks in this project",
    "target": "action == 'TASKS_CREATE'",
    "condition": "resource.isMember(subject.getDetails())"
  },
  {
    "name": "Org owner can setup org",
    "description": "Only user with role OWNER on org can setup org",
    "target": "action == 'ORG_SETUP'",
    "condition": "subject.currentOrganizationRole('OWNER')"
  },
  {
    "name": "Org owner can archive project",
    "description": "Only user with role OWNER on org can archive project",
    "target": "action == 'PROJECTS_ARCHIVE'",
    "condition": "subject.currentOrganizationRole('OWNER') && resource.getOrganizationID() == subject.getCurrentOrganization()"
  },
  {
    "name": "Project owner can view snapshot",
    "description": "Only user with role OWNER on current project can access to view Snapshots",
    "target": "action == 'PROJECT_SNAPSHOT'",
    "condition": "resource.isMember(subject.getDetails(), 'OWNER')"
  },
  {
    "name": "User can consult his vacation requests",
    "description": "Only user  can list all his vacation requests",
    "target": "action == 'VACATION_LIST'",
    "condition": "subject.is(resource)"
  },
  {
    "name": "Project owner can view project member vacation requests",
    "description": "Any user belonging to the project can see project members vacation requests",
    "target": "action == 'VACATION_TEAM_LIST'",
    "condition": "resource.isMember(subject.getDetails())"
  },
  {
    "name": "Project owner can access timesheets",
    "description": "Only user with role OWNER on current project can access to the member's timesheets of this project",
    "target": "action == 'PROJECT_TIMESHEETS'",
    "condition": "subject.currentProjectRole(resource, 'OWNER')"
  },
  {
    "name": "User can submit his timesheet weeks",
    "description": "Only user can submit his timesheet weeks",
    "target": "action == 'TIMESHEET_SUBMIT'",
    "condition": "subject.is(resource)"
  },
  {
    "name": "Project owners can validate timesheet weeks of his project members",
    "description": "Any project owner of user project can validate his weeks",
    "target": "action == 'TIMESHEET_VALIDATE'",
    "condition": "environment.isOwnerOfAnyUserProject(subject.getDetails(), resource.getAccount())"
  },
  {
    "name": "Project owners can reject timesheet weeks of his project members",
    "description": "Any project owner of user project can reject his weeks",
    "target": "action == 'TIMESHEET_REJECT'",
    "condition": "environment.isOwnerOfAnyUserProject(subject.getDetails(), resource.getAccount())"
  }
]