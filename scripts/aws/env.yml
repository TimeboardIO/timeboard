AWSTemplateFormatVersion: 2010-09-09
Parameters:
  SSHKey:
    Type: 'AWS::EC2::KeyPair::KeyName'
  KarafURL:
    Type: 'String'
  DBUser:
    Type: 'String'
  DBPassword:
    Type: 'String'
  Route53HostedZone:
    Type: 'String'
  TimeboardDNSName:
    Type: 'String'
Resources:
  InternetGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: TimeboardVPC
  InternetRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGW
      Properties:
        RouteTableId:
          Ref: RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGW
  GWAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref TimeboardVPC
        InternetGatewayId: !Ref InternetGW
  TimeboardVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: TimeboardVPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: "eu-west-1a"
  DBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: TimeboardVPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: "eu-west-1a"
  DBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: TimeboardVPC
      CidrBlock: 10.0.30.0/24
      AvailabilityZone: "eu-west-1b"
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: RouteTable
  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "*"
                Resource: "*"
  EC2WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: "EC2WebAppInstanceProfile"
      Path: "/"
      Roles:
        - Ref: RootRole
  EC2WebApp:
    Type: AWS::EC2::Instance
    DependsOn:
      - MySQLDatabase
    Properties:
      ImageId: "ami-01f14919ba412de34"
      IamInstanceProfile: !Ref 'EC2WebAppInstanceProfile'
      Tags:
        - Key: SYSTEM
          Value: TIMEBOARD
      InstanceType: t3.nano
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -x
            - |
              # Install Middlewares
            - 'sudo yum update'
            - |+

            - |
            - 'sudo yum install -y ruby wget'
            - |+

            - |
            - 'wget https://aws-codedeploy-eu-west-1.s3.amazonaws.com/latest/install && chmod +x ./install'
            - |+

            - |
            - 'sudo ./install auto'
            - |+

            - |
            - 'sudo amazon-linux-extras install -y java-openjdk11'
            - |+

            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource EC2WebApp '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

      KeyName:
        Ref: SSHKey
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "EC2WebAppSecurityGroup"
          SubnetId:
            Ref: "PublicSubnet"
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          sources:
            "/etc/karaf":
              Ref: KarafURL
  EC2WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: TimeboardVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ZC2 to connect RDS
      VpcId:
        Ref: TimeboardVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2WebAppSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
  MySQLDatabase:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: "30"
      StorageType: "gp2"
      PubliclyAccessible: "false"
      DBInstanceClass: "db.t2.micro"
      DBName: "Timeboard"
      Engine: MySQL
      BackupRetentionPeriod: 0
      EngineVersion: "8.0.16"
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      MasterUserPassword:
        Ref: DBPassword
      MasterUsername:
        Ref: DBUser

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: 'Timeboard DBSubnet'
      SubnetIds:
        - Ref: DBSubnetA
        - Ref: DBSubnetB
  WebAppDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'Route53HostedZone'
      Comment: DNS name for timeboard
      Name: !Ref 'TimeboardDNSName'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt EC2WebApp.PublicIp
Outputs:
  MySQLDNS:
    Description: Databse DNS Name
    Value: !GetAtt MySQLDatabase.Endpoint.Address
  MySQLPort:
    Description: Databse Prot
    Value: !GetAtt MySQLDatabase.Endpoint.Port
